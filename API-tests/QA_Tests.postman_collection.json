{
	"info": {
		"_postman_id": "1c5ad795-9d7a-4756-b9a9-9f517bbfb004",
		"name": "QA_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47101172"
	},
	"item": [
		{
			"name": "authentication_tests",
			"item": [
				{
					"name": "valid_credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login should succeed\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  const json = pm.response.json();\r",
									"  pm.environment.set(\"auth_token\", json.token || json.accessToken);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid_credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login should succeed\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"wrong_password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get_items",
			"item": [
				{
					"name": "getItems_with_valid_authToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is JSON array\", () => {\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res).to.be.an(\"array\");\r",
									"  pm.expect(res.length).to.be.greaterThan(0); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "getItems_with_Invalid_authToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 403\", () => {\r",
									" pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add_items",
			"item": [
				{
					"name": "add_item_without_body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail if name is missing\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error).to.include(\"name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "add_item_with_valid_body_request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches expected schema\", () => {\r",
									"  pm.response.to.have.status(201); // Created\r",
									"\r",
									"  const res = pm.response.json();\r",
									"\r",
									"  pm.expect(res).to.have.property(\"id\");\r",
									"  pm.expect(res.id).to.be.a(\"number\");\r",
									"\r",
									"  pm.expect(res).to.have.property(\"name\");\r",
									"  pm.expect(res.name).to.be.a(\"string\");\r",
									"\r",
									"  pm.environment.set('newItemId', res.id); // Save for later use\r",
									"  console.log(\"Environment variable 'newItemId' set to:\", res.id); // ðŸ”§ use 'res' instead of 'response'\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"new item\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "add_item_with_Invalid_body_request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checks exact error message\", () => {\r",
									"  pm.response.to.have.status(400)\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error).to.eql(\"'name' is required and must be a non-empty string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"new item\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "update_items",
			"item": [
				{
					"name": "update_item_with_valid_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches expected schema\", () => {\r",
									"  pm.response.to.have.status(200); \r",
									"  \r",
									"  const res = pm.response.json();\r",
									"\r",
									"  pm.expect(res).to.have.property(\"id\");\r",
									"  pm.expect(res.id).to.be.a(\"number\");\r",
									"\r",
									"  pm.expect(res).to.have.property(\"name\");\r",
									"  pm.expect(res.name).to.be.a(\"string\");\r",
									"  pm.expect(res).to.have.property(\"name\", \"item updated\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"item updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items/{{newItemId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"{{newItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_item_with_Invalid_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checks exact error message\", () => {\r",
									"  pm.response.to.have.status(404)\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error).to.eql(\"Item not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"item updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items/100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"100"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delete_items",
			"item": [
				{
					"name": "delete_item_with_valid_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleted item has same ID in response\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  const res = pm.response.json();\r",
									"  const deletedId = pm.request.url.path.slice(-1)[0]; \r",
									"  const deletedIdNum = parseInt(deletedId); // convert to number\r",
									"  \r",
									"  pm.expect(res.id).to.eql(deletedIdNum);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/items/{{newItemId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"{{newItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_item_with_Invalid_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checks exact error message\", () => {\r",
									"  pm.response.to.have.status(404)\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.error).to.eql(\"Item not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/items/13",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"13"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}