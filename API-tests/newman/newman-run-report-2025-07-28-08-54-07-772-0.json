{
  "collection": {
    "_": {
      "postman_id": "1c5ad795-9d7a-4756-b9a9-9f517bbfb004",
      "exporter_id": "47101172"
    },
    "item": [
      {
        "id": "037107ce-84bb-451f-b96a-9f4b32b22926",
        "name": "authentication_tests",
        "item": [
          {
            "id": "bcf384c5-c090-4ab8-aec6-0a9ad279a09e",
            "name": "valid_credentials",
            "request": {
              "url": {
                "path": [
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"1234\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0fab08f1-4b87-47e5-b88c-0e3b3da36809",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Login should succeed\", () => {\r",
                    "  pm.response.to.have.status(200);\r",
                    "  const json = pm.response.json();\r",
                    "  pm.environment.set(\"auth_token\", json.token || json.accessToken);\r",
                    "});"
                  ],
                  "_lastExecutionId": "b9c19d20-43c5-4c54-b2c6-a502a7d01585"
                }
              }
            ]
          },
          {
            "id": "dd3186e5-99a6-4598-81bb-b1f5cd28bf93",
            "name": "Invalid_credentials",
            "request": {
              "url": {
                "path": [
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"wrong_password\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "71f8a9b3-914c-4377-a367-08a6050d7af1",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Login should succeed\", () => {\r",
                    "  pm.response.to.have.status(401);\r",
                    "});"
                  ],
                  "_lastExecutionId": "b23cef93-9a45-4c54-a102-b2ccc38aad13"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6eeaca9c-0306-4ee5-a79f-591fa717e31d",
        "name": "get_items",
        "item": [
          {
            "id": "99450f06-1ad2-43cb-95be-8bde4abc879d",
            "name": "getItems_with_valid_authToken",
            "request": {
              "url": {
                "path": [
                  "items"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "24a9d93d-c871-424d-8a96-adc9ca4c62d1",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response is JSON array\", () => {\r",
                    "  const res = pm.response.json();\r",
                    "  pm.expect(res).to.be.an(\"array\");\r",
                    "  pm.expect(res.length).to.be.greaterThan(0); \r",
                    "});"
                  ],
                  "_lastExecutionId": "d0872aea-acd5-4db9-a89e-bb474ecec90b"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "4a3f867b-9723-4532-9340-f50bc7e83782",
            "name": "getItems_with_Invalid_authToken",
            "request": {
              "url": {
                "path": [
                  "items"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                }
              ],
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c24c2d7c-5e1a-43d0-9f26-0a38941179a7",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status should be 403\", () => {\r",
                    " pm.response.to.have.status(403);\r",
                    "});"
                  ],
                  "_lastExecutionId": "c0182477-c2cb-4936-9d4f-af2f11c131c6"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "8728b343-a08e-43b4-8142-75f6b7beb754",
        "name": "Add_items",
        "item": [
          {
            "id": "62e4c9b9-aa87-4f51-9a3d-5b415bffd4a0",
            "name": "add_item_without_body",
            "request": {
              "url": {
                "path": [
                  "items"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a7f1898c-d129-43ea-b0e4-bc6b0e6ea99d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Should fail if name is missing\", () => {\r",
                    "  pm.response.to.have.status(400);\r",
                    "\r",
                    "  const res = pm.response.json();\r",
                    "  pm.expect(res.error).to.include(\"name\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "428d013d-446f-4bb0-a97b-f346b515f63d"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "44ef1853-aa07-484e-90f4-2bb0b03ab9b7",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1d645eab-0141-4fa1-8b36-36eb44518693"
                }
              }
            ]
          },
          {
            "id": "3d236fc1-a333-4dcf-a7c7-3df67bb99355",
            "name": "add_item_with_valid_body_request",
            "request": {
              "url": {
                "path": [
                  "items"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"name\": \"new item\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b93fa6b6-2122-434e-9387-56d8f80b6038",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response matches expected schema\", () => {\r",
                    "  pm.response.to.have.status(201); // Created\r",
                    "\r",
                    "  const res = pm.response.json();\r",
                    "\r",
                    "  pm.expect(res).to.have.property(\"id\");\r",
                    "  pm.expect(res.id).to.be.a(\"number\");\r",
                    "\r",
                    "  pm.expect(res).to.have.property(\"name\");\r",
                    "  pm.expect(res.name).to.be.a(\"string\");\r",
                    "\r",
                    "  pm.environment.set('newItemId', res.id); // Save for later use\r",
                    "  console.log(\"Environment variable 'newItemId' set to:\", res.id); // 🔧 use 'res' instead of 'response'\r",
                    "});"
                  ],
                  "_lastExecutionId": "012fd3c4-acb2-4990-a0fa-ab4925258c4c"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "d75d2f13-4e82-4985-9b8d-cbe898075015",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "720e90f0-2280-4da1-8267-4f7903d723cb"
                }
              }
            ]
          },
          {
            "id": "e4dbf0fc-4b22-4678-9069-ca3353c726ca",
            "name": "add_item_with_Invalid_body_request",
            "request": {
              "url": {
                "path": [
                  "items"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"id\": \"new item\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "431913e5-3531-408f-b870-e2da6cd20d3e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Checks exact error message\", () => {\r",
                    "  pm.response.to.have.status(400)\r",
                    "  const res = pm.response.json();\r",
                    "  pm.expect(res.error).to.eql(\"'name' is required and must be a non-empty string\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "489d10ef-f2f4-4575-9f10-f16e226c3cca"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2154e98-a141-43ed-be32-43b199b39c4c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba75e424-8f38-4828-b1ce-7245318c5460"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "48252106-7eec-4742-99b4-e2d0984f77f5",
        "name": "update_items",
        "item": [
          {
            "id": "cb46669a-122d-470a-98bc-7cc18fb1dbda",
            "name": "update_item_with_valid_id",
            "request": {
              "url": {
                "path": [
                  "items",
                  "{{newItemId}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "32f6f984-6974-4796-8f20-8ca34ac7f74e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response matches expected schema\", () => {\r",
                    "  pm.response.to.have.status(200); \r",
                    "  \r",
                    "  const res = pm.response.json();\r",
                    "\r",
                    "  pm.expect(res).to.have.property(\"id\");\r",
                    "  pm.expect(res.id).to.be.a(\"number\");\r",
                    "\r",
                    "  pm.expect(res).to.have.property(\"name\");\r",
                    "  pm.expect(res.name).to.be.a(\"string\");\r",
                    "  pm.expect(res).to.have.property(\"name\", \"item updated\");\r",
                    "\r",
                    "});"
                  ],
                  "_lastExecutionId": "b2c24660-f51a-407a-99c1-d9c2257612d7"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "7891a89e-b0a5-4d77-9e22-60ec78717d4a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4e243c5-8686-4171-8b65-04c9fbe839df"
                }
              }
            ]
          },
          {
            "id": "4ac82bfc-8d89-4ab4-85e7-ad638b416965",
            "name": "update_item_with_Invalid_id",
            "request": {
              "url": {
                "path": [
                  "items",
                  "100"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "56341ffc-8fa2-4788-a845-9f945b24b376",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Checks exact error message\", () => {\r",
                    "  pm.response.to.have.status(404)\r",
                    "  const res = pm.response.json();\r",
                    "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "9489bceb-4369-46b4-882c-658368e44511"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b9728f96-3155-48bd-af39-27639986147c",
        "name": "delete_items",
        "item": [
          {
            "id": "46636635-d13b-424e-a330-bb9062c4fd2b",
            "name": "delete_item_with_valid_id",
            "request": {
              "url": {
                "path": [
                  "items",
                  "{{newItemId}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "DELETE",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2d061ec8-494e-4483-9e03-c375bc348a8c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Deleted item has same ID in response\", () => {\r",
                    "  pm.response.to.have.status(200);\r",
                    "  const res = pm.response.json();\r",
                    "  const deletedId = pm.request.url.path.slice(-1)[0]; \r",
                    "  const deletedIdNum = parseInt(deletedId); // convert to number\r",
                    "  \r",
                    "  pm.expect(res.id).to.eql(deletedIdNum);\r",
                    "});"
                  ],
                  "_lastExecutionId": "7e204360-2c58-424d-bd40-cddeb2df3f48"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "20350693-605d-4d0a-8923-5ec31c82301a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e06752a-3a5d-45df-bbad-215db99a61d1"
                }
              }
            ]
          },
          {
            "id": "74d6deb2-c457-4546-a7f4-a9f9d4143177",
            "name": "delete_item_with_Invalid_id",
            "request": {
              "url": {
                "path": [
                  "items",
                  "13"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "DELETE",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f1ce1be4-2fbc-4712-9d2f-5a0340e2b706",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Checks exact error message\", () => {\r",
                    "  pm.response.to.have.status(404)\r",
                    "  const res = pm.response.json();\r",
                    "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "4839ea14-75d0-40f5-a990-1e60862318be"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "1c5ad795-9d7a-4756-b9a9-9f517bbfb004",
      "name": "QA_Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "fbe64614-39d5-4ea1-a7ab-0b0462fa4398",
    "values": []
  },
  "globals": {
    "id": "ca42f692-427d-458b-afbc-20b89e6aa56f",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 11,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 11,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 11,
        "pending": 0,
        "failed": 11
      },
      "tests": {
        "total": 11,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 11,
        "pending": 0,
        "failed": 11
      },
      "testScripts": {
        "total": 11,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 5,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753692846568,
      "completed": 1753692847757
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 11,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0acae650-55f6-4b85-b978-6748a9961fd6",
          "httpRequestId": "7d9fa13c-911a-49b4-979e-cd8748ff334d"
        },
        "item": {
          "id": "bcf384c5-c090-4ab8-aec6-0a9ad279a09e",
          "name": "valid_credentials",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"1234\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0fab08f1-4b87-47e5-b88c-0e3b3da36809",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Login should succeed\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "  const json = pm.response.json();\r",
                  "  pm.environment.set(\"auth_token\", json.token || json.accessToken);\r",
                  "});"
                ],
                "_lastExecutionId": "b9c19d20-43c5-4c54-b2c6-a502a7d01585"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "login"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "afe5c8ea-f9bf-4340-af27-af585cbb1994",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"1234\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "bcf384c5-c090-4ab8-aec6-0a9ad279a09e",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Login should succeed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login should succeed",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2ed18aec-722f-4874-81d8-82d94645a09e",
          "length": 11,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8ad80f95-0a10-4c7d-8713-479748c5d531"
        },
        "item": {
          "id": "dd3186e5-99a6-4598-81bb-b1f5cd28bf93",
          "name": "Invalid_credentials",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"wrong_password\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "71f8a9b3-914c-4377-a367-08a6050d7af1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Login should succeed\", () => {\r",
                  "  pm.response.to.have.status(401);\r",
                  "});"
                ],
                "_lastExecutionId": "b23cef93-9a45-4c54-a102-b2ccc38aad13"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "login"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "808f3396-b9cf-43c4-b050-ac73f626be0d",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"wrong_password\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "dd3186e5-99a6-4598-81bb-b1f5cd28bf93",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Login should succeed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login should succeed",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0f010b78-f409-40d3-ba3a-88d29af685bf",
          "length": 11,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d1b97ade-7372-49a4-9ffc-8865a7099491"
        },
        "item": {
          "id": "99450f06-1ad2-43cb-95be-8bde4abc879d",
          "name": "getItems_with_valid_authToken",
          "request": {
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24a9d93d-c871-424d-8a96-adc9ca4c62d1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response is JSON array\", () => {\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res).to.be.an(\"array\");\r",
                  "  pm.expect(res.length).to.be.greaterThan(0); \r",
                  "});"
                ],
                "_lastExecutionId": "d0872aea-acd5-4db9-a89e-bb474ecec90b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "items"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7b862f59-43c1-4b54-bbb4-e6f1476c0c93",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "99450f06-1ad2-43cb-95be-8bde4abc879d",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Response is JSON array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 0,
              "test": "Response is JSON array",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "444d21de-68dc-480a-993c-25fed70b4408",
          "length": 11,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "690f1e9e-b6bc-44c6-9a70-25ab3b8726d2"
        },
        "item": {
          "id": "4a3f867b-9723-4532-9340-f50bc7e83782",
          "name": "getItems_with_Invalid_authToken",
          "request": {
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c24c2d7c-5e1a-43d0-9f26-0a38941179a7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status should be 403\", () => {\r",
                  " pm.response.to.have.status(403);\r",
                  "});"
                ],
                "_lastExecutionId": "c0182477-c2cb-4936-9d4f-af2f11c131c6"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "items"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2f8d294b-dfbb-4611-987d-5a3a2faf8483",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "4a3f867b-9723-4532-9340-f50bc7e83782",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Response status should be 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status should be 403",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "68d373e2-6547-4230-81e7-8bf4daf27648",
          "length": 11,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9acf33ea-02f3-45f6-b7a1-1ea46d551849"
        },
        "item": {
          "id": "62e4c9b9-aa87-4f51-9a3d-5b415bffd4a0",
          "name": "add_item_without_body",
          "request": {
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7f1898c-d129-43ea-b0e4-bc6b0e6ea99d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Should fail if name is missing\", () => {\r",
                  "  pm.response.to.have.status(400);\r",
                  "\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.include(\"name\");\r",
                  "});"
                ],
                "_lastExecutionId": "428d013d-446f-4bb0-a97b-f346b515f63d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "44ef1853-aa07-484e-90f4-2bb0b03ab9b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "1d645eab-0141-4fa1-8b36-36eb44518693"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "items"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ede813fa-ea70-4322-8c84-8f1aa742c56a",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "62e4c9b9-aa87-4f51-9a3d-5b415bffd4a0",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Should fail if name is missing",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Should fail if name is missing",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b4a7f402-751b-4fad-abe8-19e784fcd033",
          "length": 11,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "949a1968-59c6-4a28-b260-bf74aa8a11f0"
        },
        "item": {
          "id": "3d236fc1-a333-4dcf-a7c7-3df67bb99355",
          "name": "add_item_with_valid_body_request",
          "request": {
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"new item\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b93fa6b6-2122-434e-9387-56d8f80b6038",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response matches expected schema\", () => {\r",
                  "  pm.response.to.have.status(201); // Created\r",
                  "\r",
                  "  const res = pm.response.json();\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"id\");\r",
                  "  pm.expect(res.id).to.be.a(\"number\");\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"name\");\r",
                  "  pm.expect(res.name).to.be.a(\"string\");\r",
                  "\r",
                  "  pm.environment.set('newItemId', res.id); // Save for later use\r",
                  "  console.log(\"Environment variable 'newItemId' set to:\", res.id); // 🔧 use 'res' instead of 'response'\r",
                  "});"
                ],
                "_lastExecutionId": "012fd3c4-acb2-4990-a0fa-ab4925258c4c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d75d2f13-4e82-4985-9b8d-cbe898075015",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "720e90f0-2280-4da1-8267-4f7903d723cb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "items"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "123104f5-ff1d-42da-a9aa-01d7adb6267c",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"new item\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "3d236fc1-a333-4dcf-a7c7-3df67bb99355",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Response matches expected schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response matches expected schema",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a86cafb0-a545-4d5d-a455-7d9990f2fe2e",
          "length": 11,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f29af6fa-c5ef-4921-a7c3-608154b60e74"
        },
        "item": {
          "id": "e4dbf0fc-4b22-4678-9069-ca3353c726ca",
          "name": "add_item_with_Invalid_body_request",
          "request": {
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"new item\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "431913e5-3531-408f-b870-e2da6cd20d3e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Checks exact error message\", () => {\r",
                  "  pm.response.to.have.status(400)\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.eql(\"'name' is required and must be a non-empty string\");\r",
                  "});"
                ],
                "_lastExecutionId": "489d10ef-f2f4-4575-9f10-f16e226c3cca"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f2154e98-a141-43ed-be32-43b199b39c4c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ba75e424-8f38-4828-b1ce-7245318c5460"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "items"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "06cc6d0b-2a71-4404-84e1-06520b30bf49",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"id\": \"new item\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "e4dbf0fc-4b22-4678-9069-ca3353c726ca",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Checks exact error message",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Checks exact error message",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "21492a6b-efa6-4be7-9ef6-336fd2e58786",
          "length": 11,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "17fa6c71-3120-4098-9879-5700086c228a"
        },
        "item": {
          "id": "cb46669a-122d-470a-98bc-7cc18fb1dbda",
          "name": "update_item_with_valid_id",
          "request": {
            "url": {
              "path": [
                "items",
                "{{newItemId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32f6f984-6974-4796-8f20-8ca34ac7f74e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response matches expected schema\", () => {\r",
                  "  pm.response.to.have.status(200); \r",
                  "  \r",
                  "  const res = pm.response.json();\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"id\");\r",
                  "  pm.expect(res.id).to.be.a(\"number\");\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"name\");\r",
                  "  pm.expect(res.name).to.be.a(\"string\");\r",
                  "  pm.expect(res).to.have.property(\"name\", \"item updated\");\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "b2c24660-f51a-407a-99c1-d9c2257612d7"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7891a89e-b0a5-4d77-9e22-60ec78717d4a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e4e243c5-8686-4171-8b65-04c9fbe839df"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "items",
              "%7B%7BnewItemId%7D%7D"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7efec158-3a1c-4392-90c2-7b28b43c14bc",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "cb46669a-122d-470a-98bc-7cc18fb1dbda",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Response matches expected schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response matches expected schema",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "09702430-fb15-4e2d-badc-5b63bcc067e2",
          "length": 11,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dcc6ffc7-da94-4022-9baa-0164e7e4c2ae"
        },
        "item": {
          "id": "4ac82bfc-8d89-4ab4-85e7-ad638b416965",
          "name": "update_item_with_Invalid_id",
          "request": {
            "url": {
              "path": [
                "items",
                "100"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56341ffc-8fa2-4788-a845-9f945b24b376",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Checks exact error message\", () => {\r",
                  "  pm.response.to.have.status(404)\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                  "});"
                ],
                "_lastExecutionId": "9489bceb-4369-46b4-882c-658368e44511"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "items",
              "100"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a1a9b50c-051f-4a43-9b66-a40ed3f7a7d7",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "4ac82bfc-8d89-4ab4-85e7-ad638b416965",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Checks exact error message",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Checks exact error message",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a4a8ce04-12ba-4206-a4b4-46c0a12c9298",
          "length": 11,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fa0a343d-e19a-42c3-8eac-9fd185094c2e"
        },
        "item": {
          "id": "46636635-d13b-424e-a330-bb9062c4fd2b",
          "name": "delete_item_with_valid_id",
          "request": {
            "url": {
              "path": [
                "items",
                "{{newItemId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d061ec8-494e-4483-9e03-c375bc348a8c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Deleted item has same ID in response\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "  const res = pm.response.json();\r",
                  "  const deletedId = pm.request.url.path.slice(-1)[0]; \r",
                  "  const deletedIdNum = parseInt(deletedId); // convert to number\r",
                  "  \r",
                  "  pm.expect(res.id).to.eql(deletedIdNum);\r",
                  "});"
                ],
                "_lastExecutionId": "7e204360-2c58-424d-bd40-cddeb2df3f48"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "20350693-605d-4d0a-8923-5ec31c82301a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5e06752a-3a5d-45df-bbad-215db99a61d1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "items",
              "%7B%7BnewItemId%7D%7D"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c22548a5-3d86-46fe-a32a-4b89a463ba58",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "46636635-d13b-424e-a330-bb9062c4fd2b",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Deleted item has same ID in response",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Deleted item has same ID in response",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7a648b49-1f69-4248-b840-e4c5ea94e50d",
          "length": 11,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b37a6400-e680-4f6c-96e3-c48de55adb74"
        },
        "item": {
          "id": "74d6deb2-c457-4546-a7f4-a9f9d4143177",
          "name": "delete_item_with_Invalid_id",
          "request": {
            "url": {
              "path": [
                "items",
                "13"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1ce1be4-2fbc-4712-9d2f-5a0340e2b706",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Checks exact error message\", () => {\r",
                  "  pm.response.to.have.status(404)\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                  "});"
                ],
                "_lastExecutionId": "4839ea14-75d0-40f5-a990-1e60862318be"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "items",
              "13"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1351d0be-a57d-490a-a5f8-b2d614c0ae64",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{base_url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "74d6deb2-c457-4546-a7f4-a9f9d4143177",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}"
        },
        "assertions": [
          {
            "assertion": "Checks exact error message",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Checks exact error message",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "ba180e73-3341-4c7e-9d59-c32939724792",
          "timestamp": 1753692846707,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "bcf384c5-c090-4ab8-aec6-0a9ad279a09e",
          "name": "valid_credentials",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "afe5c8ea-f9bf-4340-af27-af585cbb1994",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"1234\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0fab08f1-4b87-47e5-b88c-0e3b3da36809",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Login should succeed\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "  const json = pm.response.json();\r",
                  "  pm.environment.set(\"auth_token\", json.token || json.accessToken);\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 11,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0acae650-55f6-4b85-b978-6748a9961fd6",
          "httpRequestId": "7d9fa13c-911a-49b4-979e-cd8748ff334d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login should succeed",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "030a35feafffb1bdfa7fe3df70b89ab0",
          "id": "de2012e2-7a5f-4e35-a5d4-fba08effbaf0",
          "timestamp": 1753692846762,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bcf384c5-c090-4ab8-aec6-0a9ad279a09e",
          "name": "valid_credentials",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"1234\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0fab08f1-4b87-47e5-b88c-0e3b3da36809",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Login should succeed\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "  const json = pm.response.json();\r",
                  "  pm.environment.set(\"auth_token\", json.token || json.accessToken);\r",
                  "});"
                ],
                "_lastExecutionId": "b9c19d20-43c5-4c54-b2c6-a502a7d01585"
              }
            }
          ]
        },
        "parent": {
          "id": "037107ce-84bb-451f-b96a-9f4b32b22926",
          "name": "authentication_tests",
          "item": [
            {
              "id": "bcf384c5-c090-4ab8-aec6-0a9ad279a09e",
              "name": "valid_credentials",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"1234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fab08f1-4b87-47e5-b88c-0e3b3da36809",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Login should succeed\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "  const json = pm.response.json();\r",
                      "  pm.environment.set(\"auth_token\", json.token || json.accessToken);\r",
                      "});"
                    ],
                    "_lastExecutionId": "b9c19d20-43c5-4c54-b2c6-a502a7d01585"
                  }
                }
              ]
            },
            {
              "id": "dd3186e5-99a6-4598-81bb-b1f5cd28bf93",
              "name": "Invalid_credentials",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"wrong_password\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71f8a9b3-914c-4377-a367-08a6050d7af1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Login should succeed\", () => {\r",
                      "  pm.response.to.have.status(401);\r",
                      "});"
                    ],
                    "_lastExecutionId": "b23cef93-9a45-4c54-a102-b2ccc38aad13"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 11,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0acae650-55f6-4b85-b978-6748a9961fd6",
          "httpRequestId": "7d9fa13c-911a-49b4-979e-cd8748ff334d",
          "scriptId": "0fab08f1-4b87-47e5-b88c-0e3b3da36809",
          "execution": "b9c19d20-43c5-4c54-b2c6-a502a7d01585"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "60ff657f-202f-4b5c-a060-77cabf509a41",
          "timestamp": 1753692846839,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "dd3186e5-99a6-4598-81bb-b1f5cd28bf93",
          "name": "Invalid_credentials",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "808f3396-b9cf-43c4-b050-ac73f626be0d",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"wrong_password\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "71f8a9b3-914c-4377-a367-08a6050d7af1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Login should succeed\", () => {\r",
                  "  pm.response.to.have.status(401);\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "2ed18aec-722f-4874-81d8-82d94645a09e",
          "length": 11,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8ad80f95-0a10-4c7d-8713-479748c5d531"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login should succeed",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "30553464ebfc2338d337d89413006307",
          "id": "ce0ce9dc-83e2-44d0-b9ab-2f622b07a8fc",
          "timestamp": 1753692846854,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dd3186e5-99a6-4598-81bb-b1f5cd28bf93",
          "name": "Invalid_credentials",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"wrong_password\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "71f8a9b3-914c-4377-a367-08a6050d7af1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Login should succeed\", () => {\r",
                  "  pm.response.to.have.status(401);\r",
                  "});"
                ],
                "_lastExecutionId": "b23cef93-9a45-4c54-a102-b2ccc38aad13"
              }
            }
          ]
        },
        "parent": {
          "id": "037107ce-84bb-451f-b96a-9f4b32b22926",
          "name": "authentication_tests",
          "item": [
            {
              "id": "bcf384c5-c090-4ab8-aec6-0a9ad279a09e",
              "name": "valid_credentials",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"1234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fab08f1-4b87-47e5-b88c-0e3b3da36809",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Login should succeed\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "  const json = pm.response.json();\r",
                      "  pm.environment.set(\"auth_token\", json.token || json.accessToken);\r",
                      "});"
                    ],
                    "_lastExecutionId": "b9c19d20-43c5-4c54-b2c6-a502a7d01585"
                  }
                }
              ]
            },
            {
              "id": "dd3186e5-99a6-4598-81bb-b1f5cd28bf93",
              "name": "Invalid_credentials",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"email\": \"admin@test.com\",\r\n  \"password\": \"wrong_password\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71f8a9b3-914c-4377-a367-08a6050d7af1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Login should succeed\", () => {\r",
                      "  pm.response.to.have.status(401);\r",
                      "});"
                    ],
                    "_lastExecutionId": "b23cef93-9a45-4c54-a102-b2ccc38aad13"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2ed18aec-722f-4874-81d8-82d94645a09e",
          "length": 11,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8ad80f95-0a10-4c7d-8713-479748c5d531",
          "scriptId": "71f8a9b3-914c-4377-a367-08a6050d7af1",
          "execution": "b23cef93-9a45-4c54-a102-b2ccc38aad13"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "dc1c511a-fcf9-491e-83ca-2ff89be45066",
          "timestamp": 1753692846943,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "99450f06-1ad2-43cb-95be-8bde4abc879d",
          "name": "getItems_with_valid_authToken",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "7b862f59-43c1-4b54-bbb4-e6f1476c0c93",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24a9d93d-c871-424d-8a96-adc9ca4c62d1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response is JSON array\", () => {\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res).to.be.an(\"array\");\r",
                  "  pm.expect(res.length).to.be.greaterThan(0); \r",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "0f010b78-f409-40d3-ba3a-88d29af685bf",
          "length": 11,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d1b97ade-7372-49a4-9ffc-8865a7099491"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 0,
          "test": "Response is JSON array",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "b170b994c2efd42750f9725da412a26b",
          "id": "c7b592cb-2096-4a7b-a9ba-004159d8cf8c",
          "timestamp": 1753692846952,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "99450f06-1ad2-43cb-95be-8bde4abc879d",
          "name": "getItems_with_valid_authToken",
          "request": {
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24a9d93d-c871-424d-8a96-adc9ca4c62d1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response is JSON array\", () => {\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res).to.be.an(\"array\");\r",
                  "  pm.expect(res.length).to.be.greaterThan(0); \r",
                  "});"
                ],
                "_lastExecutionId": "d0872aea-acd5-4db9-a89e-bb474ecec90b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "6eeaca9c-0306-4ee5-a79f-591fa717e31d",
          "name": "get_items",
          "item": [
            {
              "id": "99450f06-1ad2-43cb-95be-8bde4abc879d",
              "name": "getItems_with_valid_authToken",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24a9d93d-c871-424d-8a96-adc9ca4c62d1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response is JSON array\", () => {\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res).to.be.an(\"array\");\r",
                      "  pm.expect(res.length).to.be.greaterThan(0); \r",
                      "});"
                    ],
                    "_lastExecutionId": "d0872aea-acd5-4db9-a89e-bb474ecec90b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "4a3f867b-9723-4532-9340-f50bc7e83782",
              "name": "getItems_with_Invalid_authToken",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c24c2d7c-5e1a-43d0-9f26-0a38941179a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status should be 403\", () => {\r",
                      " pm.response.to.have.status(403);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c0182477-c2cb-4936-9d4f-af2f11c131c6"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0f010b78-f409-40d3-ba3a-88d29af685bf",
          "length": 11,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d1b97ade-7372-49a4-9ffc-8865a7099491",
          "scriptId": "24a9d93d-c871-424d-8a96-adc9ca4c62d1",
          "execution": "d0872aea-acd5-4db9-a89e-bb474ecec90b"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "45d0455a-1338-4679-8934-eb0350ffa70b",
          "timestamp": 1753692847036,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4a3f867b-9723-4532-9340-f50bc7e83782",
          "name": "getItems_with_Invalid_authToken",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2f8d294b-dfbb-4611-987d-5a3a2faf8483",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c24c2d7c-5e1a-43d0-9f26-0a38941179a7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status should be 403\", () => {\r",
                  " pm.response.to.have.status(403);\r",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "444d21de-68dc-480a-993c-25fed70b4408",
          "length": 11,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "690f1e9e-b6bc-44c6-9a70-25ab3b8726d2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status should be 403",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "33316e022b4a6b1138e197237ebcca53",
          "id": "a5914475-2c60-4b28-8e0c-f54e6f86f676",
          "timestamp": 1753692847045,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4a3f867b-9723-4532-9340-f50bc7e83782",
          "name": "getItems_with_Invalid_authToken",
          "request": {
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c24c2d7c-5e1a-43d0-9f26-0a38941179a7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status should be 403\", () => {\r",
                  " pm.response.to.have.status(403);\r",
                  "});"
                ],
                "_lastExecutionId": "c0182477-c2cb-4936-9d4f-af2f11c131c6"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "6eeaca9c-0306-4ee5-a79f-591fa717e31d",
          "name": "get_items",
          "item": [
            {
              "id": "99450f06-1ad2-43cb-95be-8bde4abc879d",
              "name": "getItems_with_valid_authToken",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24a9d93d-c871-424d-8a96-adc9ca4c62d1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response is JSON array\", () => {\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res).to.be.an(\"array\");\r",
                      "  pm.expect(res.length).to.be.greaterThan(0); \r",
                      "});"
                    ],
                    "_lastExecutionId": "d0872aea-acd5-4db9-a89e-bb474ecec90b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "4a3f867b-9723-4532-9340-f50bc7e83782",
              "name": "getItems_with_Invalid_authToken",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                  }
                ],
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c24c2d7c-5e1a-43d0-9f26-0a38941179a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status should be 403\", () => {\r",
                      " pm.response.to.have.status(403);\r",
                      "});"
                    ],
                    "_lastExecutionId": "c0182477-c2cb-4936-9d4f-af2f11c131c6"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "444d21de-68dc-480a-993c-25fed70b4408",
          "length": 11,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "690f1e9e-b6bc-44c6-9a70-25ab3b8726d2",
          "scriptId": "c24c2d7c-5e1a-43d0-9f26-0a38941179a7",
          "execution": "c0182477-c2cb-4936-9d4f-af2f11c131c6"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "8dbec542-fd40-4ca8-89ec-0c1bd591eccf",
          "timestamp": 1753692847133,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "62e4c9b9-aa87-4f51-9a3d-5b415bffd4a0",
          "name": "add_item_without_body",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "ede813fa-ea70-4322-8c84-8f1aa742c56a",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7f1898c-d129-43ea-b0e4-bc6b0e6ea99d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Should fail if name is missing\", () => {\r",
                  "  pm.response.to.have.status(400);\r",
                  "\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.include(\"name\");\r",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "44ef1853-aa07-484e-90f4-2bb0b03ab9b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "68d373e2-6547-4230-81e7-8bf4daf27648",
          "length": 11,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9acf33ea-02f3-45f6-b7a1-1ea46d551849"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Should fail if name is missing",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "2e85421a74cd8a792201c50f6867719d",
          "id": "74033049-7058-4e8a-a831-08816b95f542",
          "timestamp": 1753692847151,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "62e4c9b9-aa87-4f51-9a3d-5b415bffd4a0",
          "name": "add_item_without_body",
          "request": {
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7f1898c-d129-43ea-b0e4-bc6b0e6ea99d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Should fail if name is missing\", () => {\r",
                  "  pm.response.to.have.status(400);\r",
                  "\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.include(\"name\");\r",
                  "});"
                ],
                "_lastExecutionId": "428d013d-446f-4bb0-a97b-f346b515f63d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "44ef1853-aa07-484e-90f4-2bb0b03ab9b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "1d645eab-0141-4fa1-8b36-36eb44518693"
              }
            }
          ]
        },
        "parent": {
          "id": "8728b343-a08e-43b4-8142-75f6b7beb754",
          "name": "Add_items",
          "item": [
            {
              "id": "62e4c9b9-aa87-4f51-9a3d-5b415bffd4a0",
              "name": "add_item_without_body",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7f1898c-d129-43ea-b0e4-bc6b0e6ea99d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Should fail if name is missing\", () => {\r",
                      "  pm.response.to.have.status(400);\r",
                      "\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res.error).to.include(\"name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "428d013d-446f-4bb0-a97b-f346b515f63d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44ef1853-aa07-484e-90f4-2bb0b03ab9b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "1d645eab-0141-4fa1-8b36-36eb44518693"
                  }
                }
              ]
            },
            {
              "id": "3d236fc1-a333-4dcf-a7c7-3df67bb99355",
              "name": "add_item_with_valid_body_request",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\": \"new item\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b93fa6b6-2122-434e-9387-56d8f80b6038",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response matches expected schema\", () => {\r",
                      "  pm.response.to.have.status(201); // Created\r",
                      "\r",
                      "  const res = pm.response.json();\r",
                      "\r",
                      "  pm.expect(res).to.have.property(\"id\");\r",
                      "  pm.expect(res.id).to.be.a(\"number\");\r",
                      "\r",
                      "  pm.expect(res).to.have.property(\"name\");\r",
                      "  pm.expect(res.name).to.be.a(\"string\");\r",
                      "\r",
                      "  pm.environment.set('newItemId', res.id); // Save for later use\r",
                      "  console.log(\"Environment variable 'newItemId' set to:\", res.id); // 🔧 use 'res' instead of 'response'\r",
                      "});"
                    ],
                    "_lastExecutionId": "012fd3c4-acb2-4990-a0fa-ab4925258c4c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d75d2f13-4e82-4985-9b8d-cbe898075015",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "720e90f0-2280-4da1-8267-4f7903d723cb"
                  }
                }
              ]
            },
            {
              "id": "e4dbf0fc-4b22-4678-9069-ca3353c726ca",
              "name": "add_item_with_Invalid_body_request",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"new item\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "431913e5-3531-408f-b870-e2da6cd20d3e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Checks exact error message\", () => {\r",
                      "  pm.response.to.have.status(400)\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res.error).to.eql(\"'name' is required and must be a non-empty string\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "489d10ef-f2f4-4575-9f10-f16e226c3cca"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f2154e98-a141-43ed-be32-43b199b39c4c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "ba75e424-8f38-4828-b1ce-7245318c5460"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "68d373e2-6547-4230-81e7-8bf4daf27648",
          "length": 11,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9acf33ea-02f3-45f6-b7a1-1ea46d551849",
          "scriptId": "a7f1898c-d129-43ea-b0e4-bc6b0e6ea99d",
          "execution": "428d013d-446f-4bb0-a97b-f346b515f63d"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "4ff3a2f6-1ee8-4f7f-afc9-31123f9c8c56",
          "timestamp": 1753692847225,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3d236fc1-a333-4dcf-a7c7-3df67bb99355",
          "name": "add_item_with_valid_body_request",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "123104f5-ff1d-42da-a9aa-01d7adb6267c",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"new item\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b93fa6b6-2122-434e-9387-56d8f80b6038",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response matches expected schema\", () => {\r",
                  "  pm.response.to.have.status(201); // Created\r",
                  "\r",
                  "  const res = pm.response.json();\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"id\");\r",
                  "  pm.expect(res.id).to.be.a(\"number\");\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"name\");\r",
                  "  pm.expect(res.name).to.be.a(\"string\");\r",
                  "\r",
                  "  pm.environment.set('newItemId', res.id); // Save for later use\r",
                  "  console.log(\"Environment variable 'newItemId' set to:\", res.id); // 🔧 use 'res' instead of 'response'\r",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d75d2f13-4e82-4985-9b8d-cbe898075015",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "b4a7f402-751b-4fad-abe8-19e784fcd033",
          "length": 11,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "949a1968-59c6-4a28-b260-bf74aa8a11f0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response matches expected schema",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "19896adc2d5249f94950b40e3f0c6f2d",
          "id": "5d400493-2639-4077-aebf-b11303015d71",
          "timestamp": 1753692847234,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3d236fc1-a333-4dcf-a7c7-3df67bb99355",
          "name": "add_item_with_valid_body_request",
          "request": {
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"new item\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b93fa6b6-2122-434e-9387-56d8f80b6038",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response matches expected schema\", () => {\r",
                  "  pm.response.to.have.status(201); // Created\r",
                  "\r",
                  "  const res = pm.response.json();\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"id\");\r",
                  "  pm.expect(res.id).to.be.a(\"number\");\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"name\");\r",
                  "  pm.expect(res.name).to.be.a(\"string\");\r",
                  "\r",
                  "  pm.environment.set('newItemId', res.id); // Save for later use\r",
                  "  console.log(\"Environment variable 'newItemId' set to:\", res.id); // 🔧 use 'res' instead of 'response'\r",
                  "});"
                ],
                "_lastExecutionId": "012fd3c4-acb2-4990-a0fa-ab4925258c4c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d75d2f13-4e82-4985-9b8d-cbe898075015",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "720e90f0-2280-4da1-8267-4f7903d723cb"
              }
            }
          ]
        },
        "parent": {
          "id": "8728b343-a08e-43b4-8142-75f6b7beb754",
          "name": "Add_items",
          "item": [
            {
              "id": "62e4c9b9-aa87-4f51-9a3d-5b415bffd4a0",
              "name": "add_item_without_body",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7f1898c-d129-43ea-b0e4-bc6b0e6ea99d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Should fail if name is missing\", () => {\r",
                      "  pm.response.to.have.status(400);\r",
                      "\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res.error).to.include(\"name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "428d013d-446f-4bb0-a97b-f346b515f63d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44ef1853-aa07-484e-90f4-2bb0b03ab9b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "1d645eab-0141-4fa1-8b36-36eb44518693"
                  }
                }
              ]
            },
            {
              "id": "3d236fc1-a333-4dcf-a7c7-3df67bb99355",
              "name": "add_item_with_valid_body_request",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\": \"new item\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b93fa6b6-2122-434e-9387-56d8f80b6038",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response matches expected schema\", () => {\r",
                      "  pm.response.to.have.status(201); // Created\r",
                      "\r",
                      "  const res = pm.response.json();\r",
                      "\r",
                      "  pm.expect(res).to.have.property(\"id\");\r",
                      "  pm.expect(res.id).to.be.a(\"number\");\r",
                      "\r",
                      "  pm.expect(res).to.have.property(\"name\");\r",
                      "  pm.expect(res.name).to.be.a(\"string\");\r",
                      "\r",
                      "  pm.environment.set('newItemId', res.id); // Save for later use\r",
                      "  console.log(\"Environment variable 'newItemId' set to:\", res.id); // 🔧 use 'res' instead of 'response'\r",
                      "});"
                    ],
                    "_lastExecutionId": "012fd3c4-acb2-4990-a0fa-ab4925258c4c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d75d2f13-4e82-4985-9b8d-cbe898075015",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "720e90f0-2280-4da1-8267-4f7903d723cb"
                  }
                }
              ]
            },
            {
              "id": "e4dbf0fc-4b22-4678-9069-ca3353c726ca",
              "name": "add_item_with_Invalid_body_request",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"new item\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "431913e5-3531-408f-b870-e2da6cd20d3e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Checks exact error message\", () => {\r",
                      "  pm.response.to.have.status(400)\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res.error).to.eql(\"'name' is required and must be a non-empty string\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "489d10ef-f2f4-4575-9f10-f16e226c3cca"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f2154e98-a141-43ed-be32-43b199b39c4c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "ba75e424-8f38-4828-b1ce-7245318c5460"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b4a7f402-751b-4fad-abe8-19e784fcd033",
          "length": 11,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "949a1968-59c6-4a28-b260-bf74aa8a11f0",
          "scriptId": "b93fa6b6-2122-434e-9387-56d8f80b6038",
          "execution": "012fd3c4-acb2-4990-a0fa-ab4925258c4c"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "e2ea2d68-95d8-4e55-80bb-119f3e95f402",
          "timestamp": 1753692847317,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "e4dbf0fc-4b22-4678-9069-ca3353c726ca",
          "name": "add_item_with_Invalid_body_request",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "06cc6d0b-2a71-4404-84e1-06520b30bf49",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"new item\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "431913e5-3531-408f-b870-e2da6cd20d3e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Checks exact error message\", () => {\r",
                  "  pm.response.to.have.status(400)\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.eql(\"'name' is required and must be a non-empty string\");\r",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f2154e98-a141-43ed-be32-43b199b39c4c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "a86cafb0-a545-4d5d-a455-7d9990f2fe2e",
          "length": 11,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f29af6fa-c5ef-4921-a7c3-608154b60e74"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Checks exact error message",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "8feb1974f9b90b348d6cdd0303bd63d3",
          "id": "7ce9c418-3005-446d-925d-38cf510ac818",
          "timestamp": 1753692847336,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e4dbf0fc-4b22-4678-9069-ca3353c726ca",
          "name": "add_item_with_Invalid_body_request",
          "request": {
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"new item\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "431913e5-3531-408f-b870-e2da6cd20d3e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Checks exact error message\", () => {\r",
                  "  pm.response.to.have.status(400)\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.eql(\"'name' is required and must be a non-empty string\");\r",
                  "});"
                ],
                "_lastExecutionId": "489d10ef-f2f4-4575-9f10-f16e226c3cca"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f2154e98-a141-43ed-be32-43b199b39c4c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ba75e424-8f38-4828-b1ce-7245318c5460"
              }
            }
          ]
        },
        "parent": {
          "id": "8728b343-a08e-43b4-8142-75f6b7beb754",
          "name": "Add_items",
          "item": [
            {
              "id": "62e4c9b9-aa87-4f51-9a3d-5b415bffd4a0",
              "name": "add_item_without_body",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7f1898c-d129-43ea-b0e4-bc6b0e6ea99d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Should fail if name is missing\", () => {\r",
                      "  pm.response.to.have.status(400);\r",
                      "\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res.error).to.include(\"name\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "428d013d-446f-4bb0-a97b-f346b515f63d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44ef1853-aa07-484e-90f4-2bb0b03ab9b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "1d645eab-0141-4fa1-8b36-36eb44518693"
                  }
                }
              ]
            },
            {
              "id": "3d236fc1-a333-4dcf-a7c7-3df67bb99355",
              "name": "add_item_with_valid_body_request",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\": \"new item\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b93fa6b6-2122-434e-9387-56d8f80b6038",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response matches expected schema\", () => {\r",
                      "  pm.response.to.have.status(201); // Created\r",
                      "\r",
                      "  const res = pm.response.json();\r",
                      "\r",
                      "  pm.expect(res).to.have.property(\"id\");\r",
                      "  pm.expect(res.id).to.be.a(\"number\");\r",
                      "\r",
                      "  pm.expect(res).to.have.property(\"name\");\r",
                      "  pm.expect(res.name).to.be.a(\"string\");\r",
                      "\r",
                      "  pm.environment.set('newItemId', res.id); // Save for later use\r",
                      "  console.log(\"Environment variable 'newItemId' set to:\", res.id); // 🔧 use 'res' instead of 'response'\r",
                      "});"
                    ],
                    "_lastExecutionId": "012fd3c4-acb2-4990-a0fa-ab4925258c4c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d75d2f13-4e82-4985-9b8d-cbe898075015",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "720e90f0-2280-4da1-8267-4f7903d723cb"
                  }
                }
              ]
            },
            {
              "id": "e4dbf0fc-4b22-4678-9069-ca3353c726ca",
              "name": "add_item_with_Invalid_body_request",
              "request": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"new item\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "431913e5-3531-408f-b870-e2da6cd20d3e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Checks exact error message\", () => {\r",
                      "  pm.response.to.have.status(400)\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res.error).to.eql(\"'name' is required and must be a non-empty string\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "489d10ef-f2f4-4575-9f10-f16e226c3cca"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f2154e98-a141-43ed-be32-43b199b39c4c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "ba75e424-8f38-4828-b1ce-7245318c5460"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a86cafb0-a545-4d5d-a455-7d9990f2fe2e",
          "length": 11,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f29af6fa-c5ef-4921-a7c3-608154b60e74",
          "scriptId": "431913e5-3531-408f-b870-e2da6cd20d3e",
          "execution": "489d10ef-f2f4-4575-9f10-f16e226c3cca"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "49d27667-e026-4838-9958-cca49c78d79c",
          "timestamp": 1753692847414,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "cb46669a-122d-470a-98bc-7cc18fb1dbda",
          "name": "update_item_with_valid_id",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "items",
                "%7B%7BnewItemId%7D%7D"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "7efec158-3a1c-4392-90c2-7b28b43c14bc",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32f6f984-6974-4796-8f20-8ca34ac7f74e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response matches expected schema\", () => {\r",
                  "  pm.response.to.have.status(200); \r",
                  "  \r",
                  "  const res = pm.response.json();\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"id\");\r",
                  "  pm.expect(res.id).to.be.a(\"number\");\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"name\");\r",
                  "  pm.expect(res.name).to.be.a(\"string\");\r",
                  "  pm.expect(res).to.have.property(\"name\", \"item updated\");\r",
                  "\r",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7891a89e-b0a5-4d77-9e22-60ec78717d4a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "21492a6b-efa6-4be7-9ef6-336fd2e58786",
          "length": 11,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "17fa6c71-3120-4098-9879-5700086c228a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response matches expected schema",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "ced348f59e05531889b4f432bf59aeea",
          "id": "02184d79-1184-4f13-b88f-5226c6b1b238",
          "timestamp": 1753692847432,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cb46669a-122d-470a-98bc-7cc18fb1dbda",
          "name": "update_item_with_valid_id",
          "request": {
            "url": {
              "path": [
                "items",
                "{{newItemId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32f6f984-6974-4796-8f20-8ca34ac7f74e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response matches expected schema\", () => {\r",
                  "  pm.response.to.have.status(200); \r",
                  "  \r",
                  "  const res = pm.response.json();\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"id\");\r",
                  "  pm.expect(res.id).to.be.a(\"number\");\r",
                  "\r",
                  "  pm.expect(res).to.have.property(\"name\");\r",
                  "  pm.expect(res.name).to.be.a(\"string\");\r",
                  "  pm.expect(res).to.have.property(\"name\", \"item updated\");\r",
                  "\r",
                  "});"
                ],
                "_lastExecutionId": "b2c24660-f51a-407a-99c1-d9c2257612d7"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7891a89e-b0a5-4d77-9e22-60ec78717d4a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e4e243c5-8686-4171-8b65-04c9fbe839df"
              }
            }
          ]
        },
        "parent": {
          "id": "48252106-7eec-4742-99b4-e2d0984f77f5",
          "name": "update_items",
          "item": [
            {
              "id": "cb46669a-122d-470a-98bc-7cc18fb1dbda",
              "name": "update_item_with_valid_id",
              "request": {
                "url": {
                  "path": [
                    "items",
                    "{{newItemId}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f6f984-6974-4796-8f20-8ca34ac7f74e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response matches expected schema\", () => {\r",
                      "  pm.response.to.have.status(200); \r",
                      "  \r",
                      "  const res = pm.response.json();\r",
                      "\r",
                      "  pm.expect(res).to.have.property(\"id\");\r",
                      "  pm.expect(res.id).to.be.a(\"number\");\r",
                      "\r",
                      "  pm.expect(res).to.have.property(\"name\");\r",
                      "  pm.expect(res.name).to.be.a(\"string\");\r",
                      "  pm.expect(res).to.have.property(\"name\", \"item updated\");\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "b2c24660-f51a-407a-99c1-d9c2257612d7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7891a89e-b0a5-4d77-9e22-60ec78717d4a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e4e243c5-8686-4171-8b65-04c9fbe839df"
                  }
                }
              ]
            },
            {
              "id": "4ac82bfc-8d89-4ab4-85e7-ad638b416965",
              "name": "update_item_with_Invalid_id",
              "request": {
                "url": {
                  "path": [
                    "items",
                    "100"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56341ffc-8fa2-4788-a845-9f945b24b376",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Checks exact error message\", () => {\r",
                      "  pm.response.to.have.status(404)\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9489bceb-4369-46b4-882c-658368e44511"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "21492a6b-efa6-4be7-9ef6-336fd2e58786",
          "length": 11,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "17fa6c71-3120-4098-9879-5700086c228a",
          "scriptId": "32f6f984-6974-4796-8f20-8ca34ac7f74e",
          "execution": "b2c24660-f51a-407a-99c1-d9c2257612d7"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "79e86e06-6191-4391-b8b7-6fdbc7f354c9",
          "timestamp": 1753692847492,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4ac82bfc-8d89-4ab4-85e7-ad638b416965",
          "name": "update_item_with_Invalid_id",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "items",
                "100"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "a1a9b50c-051f-4a43-9b66-a40ed3f7a7d7",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56341ffc-8fa2-4788-a845-9f945b24b376",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Checks exact error message\", () => {\r",
                  "  pm.response.to.have.status(404)\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "09702430-fb15-4e2d-badc-5b63bcc067e2",
          "length": 11,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dcc6ffc7-da94-4022-9baa-0164e7e4c2ae"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Checks exact error message",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "b00254f83ee8763ffe973ef44ddc1e0f",
          "id": "eebc0529-1c24-4b86-bef4-242417214187",
          "timestamp": 1753692847504,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4ac82bfc-8d89-4ab4-85e7-ad638b416965",
          "name": "update_item_with_Invalid_id",
          "request": {
            "url": {
              "path": [
                "items",
                "100"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56341ffc-8fa2-4788-a845-9f945b24b376",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Checks exact error message\", () => {\r",
                  "  pm.response.to.have.status(404)\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                  "});"
                ],
                "_lastExecutionId": "9489bceb-4369-46b4-882c-658368e44511"
              }
            }
          ]
        },
        "parent": {
          "id": "48252106-7eec-4742-99b4-e2d0984f77f5",
          "name": "update_items",
          "item": [
            {
              "id": "cb46669a-122d-470a-98bc-7cc18fb1dbda",
              "name": "update_item_with_valid_id",
              "request": {
                "url": {
                  "path": [
                    "items",
                    "{{newItemId}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f6f984-6974-4796-8f20-8ca34ac7f74e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response matches expected schema\", () => {\r",
                      "  pm.response.to.have.status(200); \r",
                      "  \r",
                      "  const res = pm.response.json();\r",
                      "\r",
                      "  pm.expect(res).to.have.property(\"id\");\r",
                      "  pm.expect(res.id).to.be.a(\"number\");\r",
                      "\r",
                      "  pm.expect(res).to.have.property(\"name\");\r",
                      "  pm.expect(res.name).to.be.a(\"string\");\r",
                      "  pm.expect(res).to.have.property(\"name\", \"item updated\");\r",
                      "\r",
                      "});"
                    ],
                    "_lastExecutionId": "b2c24660-f51a-407a-99c1-d9c2257612d7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7891a89e-b0a5-4d77-9e22-60ec78717d4a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e4e243c5-8686-4171-8b65-04c9fbe839df"
                  }
                }
              ]
            },
            {
              "id": "4ac82bfc-8d89-4ab4-85e7-ad638b416965",
              "name": "update_item_with_Invalid_id",
              "request": {
                "url": {
                  "path": [
                    "items",
                    "100"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\": \"item updated\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56341ffc-8fa2-4788-a845-9f945b24b376",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Checks exact error message\", () => {\r",
                      "  pm.response.to.have.status(404)\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9489bceb-4369-46b4-882c-658368e44511"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "09702430-fb15-4e2d-badc-5b63bcc067e2",
          "length": 11,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dcc6ffc7-da94-4022-9baa-0164e7e4c2ae",
          "scriptId": "56341ffc-8fa2-4788-a845-9f945b24b376",
          "execution": "9489bceb-4369-46b4-882c-658368e44511"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "f9ea45c2-b907-47a3-ab9c-60c1858734fa",
          "timestamp": 1753692847583,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "46636635-d13b-424e-a330-bb9062c4fd2b",
          "name": "delete_item_with_valid_id",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "items",
                "%7B%7BnewItemId%7D%7D"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "c22548a5-3d86-46fe-a32a-4b89a463ba58",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d061ec8-494e-4483-9e03-c375bc348a8c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Deleted item has same ID in response\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "  const res = pm.response.json();\r",
                  "  const deletedId = pm.request.url.path.slice(-1)[0]; \r",
                  "  const deletedIdNum = parseInt(deletedId); // convert to number\r",
                  "  \r",
                  "  pm.expect(res.id).to.eql(deletedIdNum);\r",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "20350693-605d-4d0a-8923-5ec31c82301a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "a4a8ce04-12ba-4206-a4b4-46c0a12c9298",
          "length": 11,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fa0a343d-e19a-42c3-8eac-9fd185094c2e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Deleted item has same ID in response",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "d1d35af54d852505b7f4a40d83bf5463",
          "id": "6249d522-b1ae-448e-bc94-b2f19fb45b21",
          "timestamp": 1753692847592,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "46636635-d13b-424e-a330-bb9062c4fd2b",
          "name": "delete_item_with_valid_id",
          "request": {
            "url": {
              "path": [
                "items",
                "{{newItemId}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d061ec8-494e-4483-9e03-c375bc348a8c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Deleted item has same ID in response\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "  const res = pm.response.json();\r",
                  "  const deletedId = pm.request.url.path.slice(-1)[0]; \r",
                  "  const deletedIdNum = parseInt(deletedId); // convert to number\r",
                  "  \r",
                  "  pm.expect(res.id).to.eql(deletedIdNum);\r",
                  "});"
                ],
                "_lastExecutionId": "7e204360-2c58-424d-bd40-cddeb2df3f48"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "20350693-605d-4d0a-8923-5ec31c82301a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5e06752a-3a5d-45df-bbad-215db99a61d1"
              }
            }
          ]
        },
        "parent": {
          "id": "b9728f96-3155-48bd-af39-27639986147c",
          "name": "delete_items",
          "item": [
            {
              "id": "46636635-d13b-424e-a330-bb9062c4fd2b",
              "name": "delete_item_with_valid_id",
              "request": {
                "url": {
                  "path": [
                    "items",
                    "{{newItemId}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d061ec8-494e-4483-9e03-c375bc348a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Deleted item has same ID in response\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "  const res = pm.response.json();\r",
                      "  const deletedId = pm.request.url.path.slice(-1)[0]; \r",
                      "  const deletedIdNum = parseInt(deletedId); // convert to number\r",
                      "  \r",
                      "  pm.expect(res.id).to.eql(deletedIdNum);\r",
                      "});"
                    ],
                    "_lastExecutionId": "7e204360-2c58-424d-bd40-cddeb2df3f48"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "20350693-605d-4d0a-8923-5ec31c82301a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e06752a-3a5d-45df-bbad-215db99a61d1"
                  }
                }
              ]
            },
            {
              "id": "74d6deb2-c457-4546-a7f4-a9f9d4143177",
              "name": "delete_item_with_Invalid_id",
              "request": {
                "url": {
                  "path": [
                    "items",
                    "13"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1ce1be4-2fbc-4712-9d2f-5a0340e2b706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Checks exact error message\", () => {\r",
                      "  pm.response.to.have.status(404)\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4839ea14-75d0-40f5-a990-1e60862318be"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a4a8ce04-12ba-4206-a4b4-46c0a12c9298",
          "length": 11,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fa0a343d-e19a-42c3-8eac-9fd185094c2e",
          "scriptId": "2d061ec8-494e-4483-9e03-c375bc348a8c",
          "execution": "7e204360-2c58-424d-bd40-cddeb2df3f48"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{base_url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{base_url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{base_url}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "275796d940f373475453914058a491d5",
          "id": "f197e597-ecea-4b6e-90aa-713169d616c3",
          "timestamp": 1753692847677,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "74d6deb2-c457-4546-a7f4-a9f9d4143177",
          "name": "delete_item_with_Invalid_id",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "items",
                "13"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "1351d0be-a57d-490a-a5f8-b2d614c0ae64",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{base_url}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1ce1be4-2fbc-4712-9d2f-5a0340e2b706",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Checks exact error message\", () => {\r",
                  "  pm.response.to.have.status(404)\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "7a648b49-1f69-4248-b840-e4c5ea94e50d",
          "length": 11,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b37a6400-e680-4f6c-96e3-c48de55adb74"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Checks exact error message",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "006df8f4921b3ffb090a3ee8fb4ada2d",
          "id": "f54c444b-92c1-47f4-9cbe-241b72c7f915",
          "timestamp": 1753692847685,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "74d6deb2-c457-4546-a7f4-a9f9d4143177",
          "name": "delete_item_with_Invalid_id",
          "request": {
            "url": {
              "path": [
                "items",
                "13"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1ce1be4-2fbc-4712-9d2f-5a0340e2b706",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Checks exact error message\", () => {\r",
                  "  pm.response.to.have.status(404)\r",
                  "  const res = pm.response.json();\r",
                  "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                  "});"
                ],
                "_lastExecutionId": "4839ea14-75d0-40f5-a990-1e60862318be"
              }
            }
          ]
        },
        "parent": {
          "id": "b9728f96-3155-48bd-af39-27639986147c",
          "name": "delete_items",
          "item": [
            {
              "id": "46636635-d13b-424e-a330-bb9062c4fd2b",
              "name": "delete_item_with_valid_id",
              "request": {
                "url": {
                  "path": [
                    "items",
                    "{{newItemId}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d061ec8-494e-4483-9e03-c375bc348a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Deleted item has same ID in response\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "  const res = pm.response.json();\r",
                      "  const deletedId = pm.request.url.path.slice(-1)[0]; \r",
                      "  const deletedIdNum = parseInt(deletedId); // convert to number\r",
                      "  \r",
                      "  pm.expect(res.id).to.eql(deletedIdNum);\r",
                      "});"
                    ],
                    "_lastExecutionId": "7e204360-2c58-424d-bd40-cddeb2df3f48"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "20350693-605d-4d0a-8923-5ec31c82301a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e06752a-3a5d-45df-bbad-215db99a61d1"
                  }
                }
              ]
            },
            {
              "id": "74d6deb2-c457-4546-a7f4-a9f9d4143177",
              "name": "delete_item_with_Invalid_id",
              "request": {
                "url": {
                  "path": [
                    "items",
                    "13"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1ce1be4-2fbc-4712-9d2f-5a0340e2b706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Checks exact error message\", () => {\r",
                      "  pm.response.to.have.status(404)\r",
                      "  const res = pm.response.json();\r",
                      "  pm.expect(res.error).to.eql(\"Item not found\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4839ea14-75d0-40f5-a990-1e60862318be"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7a648b49-1f69-4248-b840-e4c5ea94e50d",
          "length": 11,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b37a6400-e680-4f6c-96e3-c48de55adb74",
          "scriptId": "f1ce1be4-2fbc-4712-9d2f-5a0340e2b706",
          "execution": "4839ea14-75d0-40f5-a990-1e60862318be"
        }
      }
    ],
    "error": null
  }
}